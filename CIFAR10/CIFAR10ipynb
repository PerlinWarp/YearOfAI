{
  "cells": [
    {
      "metadata": {
        "_uuid": "d613653b3dbe13f8fc31d911de09ad505dd1276e"
      },
      "cell_type": "markdown",
      "source": "# Solving CIFAR 10 using Keras (Work in progress)"
    },
    {
      "metadata": {
        "_uuid": "463394145fc7b5c95e013feabf9c67444f7d69f6"
      },
      "cell_type": "markdown",
      "source": "The CIFAR-10 dataset consists of 60000 32x32 colour images in 10 classes, with 6000 images per class. There are 50000 training images and 10000 test images. \n\nThis notebook attempts to classify those images."
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "d2890b47f1d662117ddc29e10dd0738792ddb0a3"
      },
      "cell_type": "code",
      "source": "# Import all modules\nimport time\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras.layers import Flatten\nfrom keras.constraints import maxnorm\nfrom keras.optimizers import SGD\nfrom keras.layers import Activation\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.utils import np_utils\n#from keras_sequential_ascii import sequential_model_to_ascii_printout\nfrom keras import backend as K\nif K.backend()=='tensorflow':\n    K.set_image_dim_ordering(\"th\")\n\n# Import Tensorflow with multiprocessing\nimport tensorflow as tf\nimport multiprocessing as mp\n \n# Loading the CIFAR-10 datasets\nfrom keras.datasets import cifar10",
      "execution_count": 7,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "ab7b5a1e21f7d0d79abf7cf401170111d3894076"
      },
      "cell_type": "code",
      "source": "#Declaring Variables\nbatch_size = 32 #Smaller Batch size means more updates in one epoch\n\nnum_classes = 10 \nepochs = 100 #Repeat 100 times",
      "execution_count": 8,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "5119cbf2f1a55a4e62f8c1f1d69219d27a12b158"
      },
      "cell_type": "code",
      "source": "#Load the Dataset \n(x_train, y_train), (x_test,y_test) = cifar10.load_data()\n\nclass_names = [\n    'airplane', \n    'automobile',\n    'bird',\n    'cat',\n    'deer',\n    'dog',\n    'frog',\n    'horse',\n    'ship',\n    'truck'\n]",
      "execution_count": 9,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "89d5e28e037a4fb36da0d47e2554ec97d5ccb1a5"
      },
      "cell_type": "code",
      "source": "# Print 10 random images \nfig = plt.figure(figsize=(8,3))\nfor i in range(num_classes):\n    ax = fig.add_subplot(2,5,1 + i, xticks=[],yticks=[])\n    idx = np.where(y_train[:]==i)[0]\n    features_idx = x_train[idx,::]\n    img_num = np.random.randint(features_idx.shape[0])\n    im = np.transpose(features_idx[img_num,::],(1,2,0))\n    ax.set_title(class_names[i])\n    plt.imshow(im)\nplt.show()",
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 576x216 with 10 Axes>",
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "efbbdc99b70b780994b2976898c7be25ca9456ad"
      },
      "cell_type": "markdown",
      "source": "We now need to normalize the pixel values. This means to turn them from in the range of 0-255 to be between 0 and 1. "
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "5d46fe18119002f701ef2e01c70cca6a66f54f44"
      },
      "cell_type": "code",
      "source": "y_train = np_utils.to_categorical(y_train, num_classes)\ny_test = np_utils.to_categorical(y_test, num_classes)\nx_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\nx_train  /= 255\nx_test /= 255",
      "execution_count": 11,
      "outputs": []
    },
    {
      "metadata": {
        "_uuid": "a605465e593bdf205bcac7539cc60ca8e8a7aa36"
      },
      "cell_type": "markdown",
      "source": "# Making a model"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "865b5067783aa7d3c75349fd025278527563f134"
      },
      "cell_type": "code",
      "source": "#Architecture from: https://appliedmachinelearning.blog/2018/03/24/achieving-90-accuracy-in-object-recognition-task-on-cifar-10-dataset-with-keras-convolutional-neural-networks/\nimport keras\nfrom keras import regularizers\n\ndef model():\n    weight_decay = 1e-4\n    model = Sequential()\n    model.add(Conv2D(32, (3,3), padding='same', kernel_regularizer=regularizers.l2(weight_decay), input_shape=x_train.shape[1:]))\n    model.add(Activation('elu'))\n    model.add(BatchNormalization())\n    model.add(Conv2D(32, (3,3), padding='same', kernel_regularizer=regularizers.l2(weight_decay)))\n    model.add(Activation('elu'))\n    model.add(BatchNormalization())\n    model.add(MaxPooling2D(pool_size=(2,2)))\n    model.add(Dropout(0.2))\n\n    model.add(Conv2D(64, (3,3), padding='same', kernel_regularizer=regularizers.l2(weight_decay)))\n    model.add(Activation('elu'))\n    model.add(BatchNormalization())\n    model.add(Conv2D(64, (3,3), padding='same', kernel_regularizer=regularizers.l2(weight_decay)))\n    model.add(Activation('elu'))\n    model.add(BatchNormalization())\n    model.add(MaxPooling2D(pool_size=(2,2)))\n    model.add(Dropout(0.3))\n\n    model.add(Conv2D(128, (3,3), padding='same', kernel_regularizer=regularizers.l2(weight_decay)))\n    model.add(Activation('elu'))\n    model.add(BatchNormalization())\n    model.add(Conv2D(128, (3,3), padding='same', kernel_regularizer=regularizers.l2(weight_decay)))\n    model.add(Activation('elu'))\n    model.add(BatchNormalization())\n    model.add(MaxPooling2D(pool_size=(2,2)))\n    model.add(Dropout(0.4))\n\n    model.add(Flatten())\n    model.add(Dense(num_classes, activation='softmax'))\n    \n    opt_rms = keras.optimizers.rmsprop(lr=0.001,decay=1e-6)\n    model.compile(loss='categorical_crossentropy', optimizer=opt_rms, metrics=['accuracy'])\n    return model\ncnn = model() \ncnn.summary()\n \n# Fit model\ncnn4 = cnn.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, validation_data=(x_test,y_test),shuffle=True)",
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": "_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\nconv2d_5 (Conv2D)            (None, 32, 32, 32)        896       \n_________________________________________________________________\nactivation_7 (Activation)    (None, 32, 32, 32)        0         \n_________________________________________________________________\nbatch_normalization_1 (Batch (None, 32, 32, 32)        128       \n_________________________________________________________________\nconv2d_6 (Conv2D)            (None, 32, 32, 32)        9248      \n_________________________________________________________________\nactivation_8 (Activation)    (None, 32, 32, 32)        0         \n_________________________________________________________________\nbatch_normalization_2 (Batch (None, 32, 32, 32)        128       \n_________________________________________________________________\nmax_pooling2d_3 (MaxPooling2 (None, 32, 16, 16)        0         \n_________________________________________________________________\ndropout_4 (Dropout)          (None, 32, 16, 16)        0         \n_________________________________________________________________\nconv2d_7 (Conv2D)            (None, 64, 16, 16)        18496     \n_________________________________________________________________\nactivation_9 (Activation)    (None, 64, 16, 16)        0         \n_________________________________________________________________\nbatch_normalization_3 (Batch (None, 64, 16, 16)        64        \n_________________________________________________________________\nconv2d_8 (Conv2D)            (None, 64, 16, 16)        36928     \n_________________________________________________________________\nactivation_10 (Activation)   (None, 64, 16, 16)        0         \n_________________________________________________________________\nbatch_normalization_4 (Batch (None, 64, 16, 16)        64        \n_________________________________________________________________\nmax_pooling2d_4 (MaxPooling2 (None, 64, 8, 8)          0         \n_________________________________________________________________\ndropout_5 (Dropout)          (None, 64, 8, 8)          0         \n_________________________________________________________________\nconv2d_9 (Conv2D)            (None, 128, 8, 8)         73856     \n_________________________________________________________________\nactivation_11 (Activation)   (None, 128, 8, 8)         0         \n_________________________________________________________________\nbatch_normalization_5 (Batch (None, 128, 8, 8)         32        \n_________________________________________________________________\nconv2d_10 (Conv2D)           (None, 128, 8, 8)         147584    \n_________________________________________________________________\nactivation_12 (Activation)   (None, 128, 8, 8)         0         \n_________________________________________________________________\nbatch_normalization_6 (Batch (None, 128, 8, 8)         32        \n_________________________________________________________________\nmax_pooling2d_5 (MaxPooling2 (None, 128, 4, 4)         0         \n_________________________________________________________________\ndropout_6 (Dropout)          (None, 128, 4, 4)         0         \n_________________________________________________________________\nflatten_2 (Flatten)          (None, 2048)              0         \n_________________________________________________________________\ndense_3 (Dense)              (None, 10)                20490     \n=================================================================\nTotal params: 307,946\nTrainable params: 307,722\nNon-trainable params: 224\n_________________________________________________________________\nTrain on 50000 samples, validate on 10000 samples\nEpoch 1/100\n50000/50000 [==============================] - 53s 1ms/step - loss: 1.7353 - acc: 0.4284 - val_loss: 1.1638 - val_acc: 0.6076\nEpoch 2/100\n50000/50000 [==============================] - 36s 720us/step - loss: 1.1095 - acc: 0.6371 - val_loss: 1.2543 - val_acc: 0.5980\nEpoch 3/100\n50000/50000 [==============================] - 36s 719us/step - loss: 0.9454 - acc: 0.7029 - val_loss: 0.8810 - val_acc: 0.7272\nEpoch 4/100\n50000/50000 [==============================] - 36s 719us/step - loss: 0.8663 - acc: 0.7367 - val_loss: 0.8153 - val_acc: 0.7583\nEpoch 5/100\n50000/50000 [==============================] - 36s 721us/step - loss: 0.8058 - acc: 0.7620 - val_loss: 0.8241 - val_acc: 0.7625\nEpoch 6/100\n50000/50000 [==============================] - 36s 725us/step - loss: 0.7728 - acc: 0.7772 - val_loss: 0.8636 - val_acc: 0.7534\nEpoch 7/100\n50000/50000 [==============================] - 36s 719us/step - loss: 0.7433 - acc: 0.7906 - val_loss: 0.7521 - val_acc: 0.7962\nEpoch 8/100\n50000/50000 [==============================] - 36s 719us/step - loss: 0.7150 - acc: 0.8042 - val_loss: 0.7558 - val_acc: 0.7962\nEpoch 9/100\n50000/50000 [==============================] - 36s 721us/step - loss: 0.6972 - acc: 0.8126 - val_loss: 0.7662 - val_acc: 0.7927\nEpoch 10/100\n50000/50000 [==============================] - 36s 721us/step - loss: 0.6770 - acc: 0.8212 - val_loss: 0.7248 - val_acc: 0.8064\nEpoch 11/100\n50000/50000 [==============================] - 36s 718us/step - loss: 0.6609 - acc: 0.8294 - val_loss: 0.7495 - val_acc: 0.8076\nEpoch 12/100\n50000/50000 [==============================] - 36s 719us/step - loss: 0.6498 - acc: 0.8351 - val_loss: 0.7552 - val_acc: 0.8078\nEpoch 13/100\n50000/50000 [==============================] - 36s 722us/step - loss: 0.6427 - acc: 0.8385 - val_loss: 0.7225 - val_acc: 0.8176\nEpoch 14/100\n50000/50000 [==============================] - 36s 722us/step - loss: 0.6333 - acc: 0.8442 - val_loss: 0.7355 - val_acc: 0.8160\nEpoch 15/100\n50000/50000 [==============================] - 36s 721us/step - loss: 0.6218 - acc: 0.8473 - val_loss: 0.7105 - val_acc: 0.8293\nEpoch 16/100\n50000/50000 [==============================] - 36s 723us/step - loss: 0.6160 - acc: 0.8516 - val_loss: 0.7178 - val_acc: 0.8229\nEpoch 17/100\n50000/50000 [==============================] - 36s 719us/step - loss: 0.6067 - acc: 0.8575 - val_loss: 0.7504 - val_acc: 0.8167\nEpoch 18/100\n50000/50000 [==============================] - 36s 721us/step - loss: 0.6023 - acc: 0.8597 - val_loss: 0.7105 - val_acc: 0.8309\nEpoch 19/100\n50000/50000 [==============================] - 36s 719us/step - loss: 0.5957 - acc: 0.8615 - val_loss: 0.6958 - val_acc: 0.8366\nEpoch 20/100\n50000/50000 [==============================] - 36s 716us/step - loss: 0.5899 - acc: 0.8661 - val_loss: 0.6957 - val_acc: 0.8369\nEpoch 21/100\n50000/50000 [==============================] - 36s 717us/step - loss: 0.5857 - acc: 0.8680 - val_loss: 0.6799 - val_acc: 0.8383\nEpoch 22/100\n50000/50000 [==============================] - 36s 719us/step - loss: 0.5827 - acc: 0.8696 - val_loss: 0.7154 - val_acc: 0.8308\nEpoch 23/100\n50000/50000 [==============================] - 36s 721us/step - loss: 0.5765 - acc: 0.8728 - val_loss: 0.7304 - val_acc: 0.8258\nEpoch 24/100\n50000/50000 [==============================] - 36s 719us/step - loss: 0.5800 - acc: 0.8731 - val_loss: 0.7203 - val_acc: 0.8342\nEpoch 25/100\n50000/50000 [==============================] - 36s 718us/step - loss: 0.5705 - acc: 0.8774 - val_loss: 0.6951 - val_acc: 0.8402\nEpoch 26/100\n50000/50000 [==============================] - 36s 723us/step - loss: 0.5665 - acc: 0.8774 - val_loss: 0.7083 - val_acc: 0.8385\nEpoch 27/100\n50000/50000 [==============================] - 36s 724us/step - loss: 0.5591 - acc: 0.8816 - val_loss: 0.7394 - val_acc: 0.8328\nEpoch 28/100\n50000/50000 [==============================] - 36s 721us/step - loss: 0.5604 - acc: 0.8796 - val_loss: 0.6983 - val_acc: 0.8448\nEpoch 29/100\n50000/50000 [==============================] - 36s 723us/step - loss: 0.5628 - acc: 0.8829 - val_loss: 0.6840 - val_acc: 0.8463\nEpoch 30/100\n50000/50000 [==============================] - 36s 724us/step - loss: 0.5578 - acc: 0.8816 - val_loss: 0.7034 - val_acc: 0.8466\nEpoch 31/100\n50000/50000 [==============================] - 36s 725us/step - loss: 0.5557 - acc: 0.8839 - val_loss: 0.6752 - val_acc: 0.8471\nEpoch 32/100\n",
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": "50000/50000 [==============================] - 36s 724us/step - loss: 0.5493 - acc: 0.8879 - val_loss: 0.7035 - val_acc: 0.8434\nEpoch 33/100\n50000/50000 [==============================] - 36s 724us/step - loss: 0.5516 - acc: 0.8861 - val_loss: 0.7232 - val_acc: 0.8378\nEpoch 34/100\n50000/50000 [==============================] - 36s 724us/step - loss: 0.5470 - acc: 0.8884 - val_loss: 0.7066 - val_acc: 0.8443\nEpoch 35/100\n50000/50000 [==============================] - 36s 724us/step - loss: 0.5446 - acc: 0.8900 - val_loss: 0.7057 - val_acc: 0.8427\nEpoch 36/100\n50000/50000 [==============================] - 36s 723us/step - loss: 0.5408 - acc: 0.8909 - val_loss: 0.7097 - val_acc: 0.8428\nEpoch 37/100\n50000/50000 [==============================] - 36s 720us/step - loss: 0.5423 - acc: 0.8904 - val_loss: 0.7150 - val_acc: 0.8389\nEpoch 38/100\n50000/50000 [==============================] - 36s 722us/step - loss: 0.5445 - acc: 0.8911 - val_loss: 0.7166 - val_acc: 0.8434\nEpoch 39/100\n50000/50000 [==============================] - 36s 724us/step - loss: 0.5346 - acc: 0.8927 - val_loss: 0.7473 - val_acc: 0.8395\nEpoch 40/100\n50000/50000 [==============================] - 36s 727us/step - loss: 0.5354 - acc: 0.8938 - val_loss: 0.7302 - val_acc: 0.8402\nEpoch 41/100\n50000/50000 [==============================] - 36s 724us/step - loss: 0.5347 - acc: 0.8951 - val_loss: 0.7218 - val_acc: 0.8419\nEpoch 42/100\n50000/50000 [==============================] - 36s 724us/step - loss: 0.5328 - acc: 0.8954 - val_loss: 0.7233 - val_acc: 0.8408\nEpoch 43/100\n50000/50000 [==============================] - 36s 724us/step - loss: 0.5304 - acc: 0.8970 - val_loss: 0.7018 - val_acc: 0.8464\nEpoch 44/100\n50000/50000 [==============================] - 36s 724us/step - loss: 0.5287 - acc: 0.8983 - val_loss: 0.7244 - val_acc: 0.8489\nEpoch 45/100\n50000/50000 [==============================] - 36s 723us/step - loss: 0.5266 - acc: 0.8967 - val_loss: 0.6987 - val_acc: 0.8459\nEpoch 46/100\n50000/50000 [==============================] - 36s 717us/step - loss: 0.5265 - acc: 0.8976 - val_loss: 0.6940 - val_acc: 0.8529\nEpoch 47/100\n50000/50000 [==============================] - 36s 718us/step - loss: 0.5269 - acc: 0.8975 - val_loss: 0.6970 - val_acc: 0.8481\nEpoch 48/100\n50000/50000 [==============================] - 36s 719us/step - loss: 0.5221 - acc: 0.8995 - val_loss: 0.7062 - val_acc: 0.8517\nEpoch 49/100\n50000/50000 [==============================] - 36s 719us/step - loss: 0.5204 - acc: 0.8992 - val_loss: 0.7995 - val_acc: 0.8320\nEpoch 50/100\n50000/50000 [==============================] - 36s 719us/step - loss: 0.5225 - acc: 0.9009 - val_loss: 0.7073 - val_acc: 0.8508\nEpoch 51/100\n50000/50000 [==============================] - 36s 718us/step - loss: 0.5196 - acc: 0.8999 - val_loss: 0.6922 - val_acc: 0.8510\nEpoch 52/100\n50000/50000 [==============================] - 36s 718us/step - loss: 0.5172 - acc: 0.9017 - val_loss: 0.7248 - val_acc: 0.8427\nEpoch 53/100\n50000/50000 [==============================] - 36s 719us/step - loss: 0.5158 - acc: 0.9020 - val_loss: 0.7028 - val_acc: 0.8495\nEpoch 54/100\n50000/50000 [==============================] - 36s 717us/step - loss: 0.5145 - acc: 0.9027 - val_loss: 0.7433 - val_acc: 0.8376\nEpoch 55/100\n50000/50000 [==============================] - 36s 720us/step - loss: 0.5114 - acc: 0.9039 - val_loss: 0.7529 - val_acc: 0.8432\nEpoch 56/100\n50000/50000 [==============================] - 36s 721us/step - loss: 0.5105 - acc: 0.9032 - val_loss: 0.6857 - val_acc: 0.8576\nEpoch 57/100\n50000/50000 [==============================] - 36s 719us/step - loss: 0.5142 - acc: 0.9037 - val_loss: 0.7106 - val_acc: 0.8477\nEpoch 58/100\n50000/50000 [==============================] - 36s 721us/step - loss: 0.5122 - acc: 0.9036 - val_loss: 0.7275 - val_acc: 0.8514\nEpoch 59/100\n50000/50000 [==============================] - 36s 720us/step - loss: 0.5075 - acc: 0.9052 - val_loss: 0.7088 - val_acc: 0.8491\nEpoch 60/100\n50000/50000 [==============================] - 36s 718us/step - loss: 0.5099 - acc: 0.9049 - val_loss: 0.7017 - val_acc: 0.8527\nEpoch 61/100\n50000/50000 [==============================] - 36s 720us/step - loss: 0.5062 - acc: 0.9051 - val_loss: 0.6886 - val_acc: 0.8543\nEpoch 62/100\n50000/50000 [==============================] - 36s 719us/step - loss: 0.5084 - acc: 0.9047 - val_loss: 0.7131 - val_acc: 0.8510\nEpoch 63/100\n50000/50000 [==============================] - 36s 715us/step - loss: 0.5060 - acc: 0.9050 - val_loss: 0.7292 - val_acc: 0.8452\nEpoch 64/100\n50000/50000 [==============================] - 36s 717us/step - loss: 0.5067 - acc: 0.9058 - val_loss: 0.7466 - val_acc: 0.8425\nEpoch 65/100\n50000/50000 [==============================] - 36s 720us/step - loss: 0.5043 - acc: 0.9067 - val_loss: 0.7055 - val_acc: 0.8520\nEpoch 66/100\n50000/50000 [==============================] - 36s 720us/step - loss: 0.5025 - acc: 0.9064 - val_loss: 0.7076 - val_acc: 0.8517\nEpoch 67/100\n50000/50000 [==============================] - 36s 720us/step - loss: 0.5014 - acc: 0.9074 - val_loss: 0.6830 - val_acc: 0.8542\nEpoch 68/100\n50000/50000 [==============================] - 36s 718us/step - loss: 0.4998 - acc: 0.9091 - val_loss: 0.7134 - val_acc: 0.8582\nEpoch 69/100\n50000/50000 [==============================] - 36s 718us/step - loss: 0.4950 - acc: 0.9097 - val_loss: 0.7016 - val_acc: 0.8560\nEpoch 70/100\n50000/50000 [==============================] - 36s 717us/step - loss: 0.4966 - acc: 0.9097 - val_loss: 0.7079 - val_acc: 0.8547\nEpoch 71/100\n50000/50000 [==============================] - 36s 718us/step - loss: 0.5012 - acc: 0.9080 - val_loss: 0.6921 - val_acc: 0.8547\nEpoch 72/100\n50000/50000 [==============================] - 36s 716us/step - loss: 0.4981 - acc: 0.9086 - val_loss: 0.7136 - val_acc: 0.8503\nEpoch 73/100\n50000/50000 [==============================] - 36s 718us/step - loss: 0.4962 - acc: 0.9096 - val_loss: 0.7099 - val_acc: 0.8538\nEpoch 74/100\n50000/50000 [==============================] - 36s 717us/step - loss: 0.4959 - acc: 0.9094 - val_loss: 0.7097 - val_acc: 0.8455\nEpoch 75/100\n50000/50000 [==============================] - 36s 720us/step - loss: 0.4928 - acc: 0.9109 - val_loss: 0.6927 - val_acc: 0.8544\nEpoch 76/100\n50000/50000 [==============================] - 36s 720us/step - loss: 0.4923 - acc: 0.9117 - val_loss: 0.7303 - val_acc: 0.8456\nEpoch 77/100\n50000/50000 [==============================] - 36s 716us/step - loss: 0.4880 - acc: 0.9123 - val_loss: 0.7020 - val_acc: 0.8541\nEpoch 78/100\n50000/50000 [==============================] - 36s 718us/step - loss: 0.4901 - acc: 0.9124 - val_loss: 0.6980 - val_acc: 0.8515\nEpoch 79/100\n50000/50000 [==============================] - 36s 719us/step - loss: 0.4902 - acc: 0.9110 - val_loss: 0.7005 - val_acc: 0.8548\nEpoch 80/100\n50000/50000 [==============================] - 36s 717us/step - loss: 0.4851 - acc: 0.9132 - val_loss: 0.6921 - val_acc: 0.8517\nEpoch 81/100\n50000/50000 [==============================] - 36s 720us/step - loss: 0.4877 - acc: 0.9123 - val_loss: 0.7300 - val_acc: 0.8489\nEpoch 82/100\n50000/50000 [==============================] - 36s 721us/step - loss: 0.4869 - acc: 0.9136 - val_loss: 0.6874 - val_acc: 0.8575\nEpoch 83/100\n50000/50000 [==============================] - 36s 720us/step - loss: 0.4862 - acc: 0.9126 - val_loss: 0.7234 - val_acc: 0.8533\nEpoch 84/100\n50000/50000 [==============================] - 36s 719us/step - loss: 0.4865 - acc: 0.9145 - val_loss: 0.7055 - val_acc: 0.8544\nEpoch 85/100\n50000/50000 [==============================] - 36s 719us/step - loss: 0.4834 - acc: 0.9125 - val_loss: 0.7117 - val_acc: 0.8600\nEpoch 86/100\n50000/50000 [==============================] - 36s 719us/step - loss: 0.4834 - acc: 0.9134 - val_loss: 0.7059 - val_acc: 0.8545\nEpoch 87/100\n50000/50000 [==============================] - 36s 718us/step - loss: 0.4864 - acc: 0.9126 - val_loss: 0.7292 - val_acc: 0.8499\nEpoch 88/100\n50000/50000 [==============================] - 36s 720us/step - loss: 0.4799 - acc: 0.9161 - val_loss: 0.7049 - val_acc: 0.8600\nEpoch 89/100\n50000/50000 [==============================] - 36s 718us/step - loss: 0.4831 - acc: 0.9139 - val_loss: 0.6801 - val_acc: 0.8599\nEpoch 90/100\n",
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": "50000/50000 [==============================] - 36s 719us/step - loss: 0.4839 - acc: 0.9141 - val_loss: 0.6950 - val_acc: 0.8580\nEpoch 91/100\n50000/50000 [==============================] - 36s 720us/step - loss: 0.4824 - acc: 0.9140 - val_loss: 0.6996 - val_acc: 0.8570\nEpoch 92/100\n50000/50000 [==============================] - 36s 718us/step - loss: 0.4802 - acc: 0.9146 - val_loss: 0.7135 - val_acc: 0.8510\nEpoch 93/100\n50000/50000 [==============================] - 36s 720us/step - loss: 0.4766 - acc: 0.9167 - val_loss: 0.7099 - val_acc: 0.8555\nEpoch 94/100\n50000/50000 [==============================] - 36s 719us/step - loss: 0.4758 - acc: 0.9155 - val_loss: 0.6854 - val_acc: 0.8571\nEpoch 95/100\n50000/50000 [==============================] - 36s 720us/step - loss: 0.4811 - acc: 0.9155 - val_loss: 0.6751 - val_acc: 0.8598\nEpoch 96/100\n50000/50000 [==============================] - 36s 719us/step - loss: 0.4705 - acc: 0.9175 - val_loss: 0.7144 - val_acc: 0.8500\nEpoch 97/100\n50000/50000 [==============================] - 36s 716us/step - loss: 0.4766 - acc: 0.9171 - val_loss: 0.6762 - val_acc: 0.8629\nEpoch 98/100\n50000/50000 [==============================] - 36s 721us/step - loss: 0.4769 - acc: 0.9168 - val_loss: 0.6940 - val_acc: 0.8608\nEpoch 99/100\n50000/50000 [==============================] - 36s 725us/step - loss: 0.4741 - acc: 0.9176 - val_loss: 0.7059 - val_acc: 0.8532\nEpoch 100/100\n50000/50000 [==============================] - 36s 720us/step - loss: 0.4753 - acc: 0.9169 - val_loss: 0.6992 - val_acc: 0.8576\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "e9532be4d764a838e540d01a28932a56865a5ee6"
      },
      "cell_type": "markdown",
      "source": "# Plotting our accuracy and loss"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "3c33e393447b700f02b5616f67ff8027c9fe011f"
      },
      "cell_type": "code",
      "source": "plt.figure(0)\nplt.plot(cnn4.history['acc'],'r')\nplt.plot(cnn4.history['val_acc'],'g')\nplt.plot()",
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 16,
          "data": {
            "text/plain": "[]"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 432x288 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "56b4c2ce7faee1056eca5fbac200cc0a36b0b2da"
      },
      "cell_type": "code",
      "source": "scores = cnn.evaluate(x_test, y_test, verbose=0)\nprint(\"Accuracy: %.2f%%\" % (scores[1]*100))",
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": "Accuracy: 85.76%\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "198dfc8675e01fa291e07debb3e8290edfdc4177"
      },
      "cell_type": "markdown",
      "source": "# Confusion Matrix for our model"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "ea084dfeb822ed1834052c1cba4a656401971bce"
      },
      "cell_type": "code",
      "source": "from sklearn.metrics import classification_report, confusion_matrix\nY_pred = cnn_n.predict(x_test, verbose=2)\ny_pred = np.argmax(Y_pred, axis=1)\n \nfor ix in range(10):\n    print(ix, confusion_matrix(np.argmax(y_test,axis=1),y_pred)[ix].sum())\ncm = confusion_matrix(np.argmax(y_test,axis=1),y_pred)\nprint(cm)\n \n# Visualizing of confusion matrix\nimport seaborn as sn\nimport pandas  as pd\n\ndf_cm = pd.DataFrame(cm, range(10),range(10))\nplt.figure(figsize = (10,7))\nsn.set(font_scale=1.4)#for label size\nsn.heatmap(df_cm, annot=True,annot_kws={\"size\": 12})# font size\nplt.show()",
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": "0 1000\n1 1000\n2 1000\n3 1000\n4 1000\n5 1000\n6 1000\n7 1000\n8 1000\n9 1000\n[[1000    0    0    0    0    0    0    0    0    0]\n [1000    0    0    0    0    0    0    0    0    0]\n [1000    0    0    0    0    0    0    0    0    0]\n [1000    0    0    0    0    0    0    0    0    0]\n [1000    0    0    0    0    0    0    0    0    0]\n [1000    0    0    0    0    0    0    0    0    0]\n [1000    0    0    0    0    0    0    0    0    0]\n [1000    0    0    0    0    0    0    0    0    0]\n [1000    0    0    0    0    0    0    0    0    0]\n [1000    0    0    0    0    0    0    0    0    0]]\n",
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 720x504 with 2 Axes>",
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "76233b82fbdb2b2b0e2d49210afbac222499bfa2"
      },
      "cell_type": "markdown",
      "source": "# Saving our initial model to disk"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "4b1f2e569bbf26c0e69b0a0b70f2d4bd2eaca50a"
      },
      "cell_type": "code",
      "source": "#save to disk\nmodel_json = cnn.to_json()\nwith open('model.json', 'w') as json_file:\n    json_file.write(model_json)\ncnn.save_weights('model.h5') ",
      "execution_count": 23,
      "outputs": []
    },
    {
      "metadata": {
        "_uuid": "73449d2e3be6d973dbfcced3d47e856e041eaa5c"
      },
      "cell_type": "markdown",
      "source": "# Using the model for prediction"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "97a1aeeba9d4d72d181fd6f4acfb40f92f1d691a"
      },
      "cell_type": "code",
      "source": "from matplotlib import pyplot\nfrom scipy.misc import toimage\nfrom keras.models import model_from_json\n\n(x_train, y_train), (x_test, y_test) = cifar10.load_data()\n \nx_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\n \n# mean-std normalization\nmean = np.mean(x_train,axis=(0,1,2,3))\nstd = np.std(x_train,axis=(0,1,2,3))\nx_train = (x_train-mean)/(std+1e-7)\nx_test = (x_test-mean)/(std+1e-7)\n\ndef show_imgs(X):\n    pyplot.figure(1)\n    k = 0\n    for i in range(0,4):\n        for j in range(0,4):\n            pyplot.subplot2grid((4,4),(i,j))\n            pyplot.imshow(toimage(X[k]))\n            k = k+1\n    # show the plot\n    pyplot.show()\n    \nshow_imgs(x_test[:16])\n \n# Load trained CNN model\njson_file = open('model.json', 'r')\nloaded_model_json = json_file.read()\njson_file.close()\nmodel = model_from_json(loaded_model_json)\nmodel.load_weights('model.h5')\n \nlabels =  ['airplane','automobile','bird','cat','deer','dog','frog','horse','ship','truck']\n \nindices = np.argmax(model.predict(x_test[:16]),1)\nprint([labels[x] for x in indices])",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.6.6",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 1
}